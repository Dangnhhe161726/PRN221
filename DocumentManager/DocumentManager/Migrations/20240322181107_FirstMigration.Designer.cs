// <auto-generated />
using System;
using DocumentManager.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocumentManager.Migrations
{
    [DbContext(typeof(ApplicationDbcontext))]
    [Migration("20240322181107_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DocumentManager.Models.AgencyIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Agency_Issues", (string)null);
                });

            modelBuilder.Entity("DocumentManager.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DocumentManager.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AgencyIssuesId")
                        .HasColumnType("int")
                        .HasColumnName("Agency_Issues_id");

                    b.Property<string>("Aid")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Category_id");

                    b.Property<DateTime?>("DateOut")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_out");

                    b.Property<DateTime?>("DateSign")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_Sign");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_To");

                    b.Property<string>("Describe")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("EmergencyId")
                        .HasColumnType("int")
                        .HasColumnName("Emergency_id");

                    b.Property<int?>("GroupDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("Group_DocumentId");

                    b.Property<string>("LinkFile")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<int?>("NameDocumentId")
                        .HasColumnType("int")
                        .HasColumnName("Name_DocumentId");

                    b.Property<string>("NameFile")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Page")
                        .HasColumnType("int");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Receiver")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("Security_id");

                    b.Property<int?>("SignerId")
                        .HasColumnType("int")
                        .HasColumnName("Signer_id");

                    b.Property<int?>("SpecializedId")
                        .HasColumnType("int")
                        .HasColumnName("Specialized_id");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Symbol")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("confirm")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AgencyIssuesId");

                    b.HasIndex("Aid");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EmergencyId");

                    b.HasIndex("GroupDocumentId");

                    b.HasIndex("NameDocumentId");

                    b.HasIndex("SecurityId");

                    b.HasIndex("SignerId");

                    b.HasIndex("SpecializedId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DocumentManager.Models.Emergency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Level")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Emergencies");
                });

            modelBuilder.Entity("DocumentManager.Models.GroupDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("ExpirationYear")
                        .HasColumnType("datetime")
                        .HasColumnName("Expiration_Year");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Group_Documents", (string)null);
                });

            modelBuilder.Entity("DocumentManager.Models.NameDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Name_Documents", (string)null);
                });

            modelBuilder.Entity("DocumentManager.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("DocumentManager.Models.Sercurity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Level")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Sercurities");
                });

            modelBuilder.Entity("DocumentManager.Models.Signer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Pid")
                        .HasColumnType("int")
                        .HasColumnName("pid");

                    b.Property<string>("userId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Pid");

                    b.HasIndex("userId");

                    b.ToTable("Signers");
                });

            modelBuilder.Entity("DocumentManager.Models.Specialize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Specializes");
                });

            modelBuilder.Entity("DocumentManager.Models.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FristName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dfa2692d-10f1-4e31-a2ab-8cf95ea68b54",
                            ConcurrencyStamp = "9858fa93-6865-49d0-afba-947ceadffebc",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "f0151099-025e-4149-8ac9-1f5ab7b10f2e",
                            ConcurrencyStamp = "4ea333b3-bc8a-4b35-8dd4-dd2dd12a740f",
                            Name = "employee",
                            NormalizedName = "employee"
                        },
                        new
                        {
                            Id = "5ea9665d-2c60-4e58-89b5-367a2c016b0d",
                            ConcurrencyStamp = "a572eabf-080a-43e1-9706-0eb165f845e7",
                            Name = "senior",
                            NormalizedName = "senior"
                        },
                        new
                        {
                            Id = "e4882ec6-9ef9-44c7-b5ee-2959bd2c6548",
                            ConcurrencyStamp = "9ab545b5-8d5a-4bf2-83fa-130055faf447",
                            Name = "signer",
                            NormalizedName = "signer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DocumentManager.Models.Document", b =>
                {
                    b.HasOne("DocumentManager.Models.AgencyIssue", "AgencyIssues")
                        .WithMany("Documents")
                        .HasForeignKey("AgencyIssuesId")
                        .HasConstraintName("FK_Documents_Agency_Issues");

                    b.HasOne("DocumentManager.Models.Users", "Users")
                        .WithMany("Documents")
                        .HasForeignKey("Aid")
                        .HasConstraintName("FK_Documents_Users");

                    b.HasOne("DocumentManager.Models.Category", "Category")
                        .WithMany("Documents")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Documents_Categories");

                    b.HasOne("DocumentManager.Models.Emergency", "Emergency")
                        .WithMany("Documents")
                        .HasForeignKey("EmergencyId")
                        .HasConstraintName("FK_Documents_Emergencies");

                    b.HasOne("DocumentManager.Models.GroupDocument", "GroupDocument")
                        .WithMany("Documents")
                        .HasForeignKey("GroupDocumentId")
                        .HasConstraintName("FK_Documents_Group_Document");

                    b.HasOne("DocumentManager.Models.NameDocument", "NameDocument")
                        .WithMany("Documents")
                        .HasForeignKey("NameDocumentId")
                        .HasConstraintName("FK_Documents_Name_Document");

                    b.HasOne("DocumentManager.Models.Sercurity", "Security")
                        .WithMany("Documents")
                        .HasForeignKey("SecurityId")
                        .HasConstraintName("FK_Documents_Sercurities");

                    b.HasOne("DocumentManager.Models.Signer", "Signer")
                        .WithMany("Documents")
                        .HasForeignKey("SignerId")
                        .HasConstraintName("FK_Documents_Signer");

                    b.HasOne("DocumentManager.Models.Specialize", "Specialized")
                        .WithMany("Documents")
                        .HasForeignKey("SpecializedId")
                        .HasConstraintName("FK_Documents_Specialize");

                    b.Navigation("AgencyIssues");

                    b.Navigation("Category");

                    b.Navigation("Emergency");

                    b.Navigation("GroupDocument");

                    b.Navigation("NameDocument");

                    b.Navigation("Security");

                    b.Navigation("Signer");

                    b.Navigation("Specialized");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DocumentManager.Models.Signer", b =>
                {
                    b.HasOne("DocumentManager.Models.Position", "PidNavigation")
                        .WithMany("Signers")
                        .HasForeignKey("Pid")
                        .HasConstraintName("FK_Signer_Position");

                    b.HasOne("DocumentManager.Models.Users", "Users")
                        .WithMany("Signers")
                        .HasForeignKey("userId")
                        .HasConstraintName("FK_Signer_User");

                    b.Navigation("PidNavigation");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DocumentManager.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DocumentManager.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentManager.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DocumentManager.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentManager.Models.AgencyIssue", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DocumentManager.Models.Category", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DocumentManager.Models.Emergency", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DocumentManager.Models.GroupDocument", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DocumentManager.Models.NameDocument", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DocumentManager.Models.Position", b =>
                {
                    b.Navigation("Signers");
                });

            modelBuilder.Entity("DocumentManager.Models.Sercurity", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DocumentManager.Models.Signer", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DocumentManager.Models.Specialize", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DocumentManager.Models.Users", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Signers");
                });
#pragma warning restore 612, 618
        }
    }
}
